Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.apache_server will be created
  + resource "aws_instance" "apache_server" {
      + ami                                  = "ami-00eb69d236edcfaf8"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "apache-key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Group"       = "Grupo6"
          + "Name"        = "ec2-apache-pin2"
          + "Project"     = "PIN2"
          + "environment" = "test"
          + "equipo"      = "Grupo6"
          + "proyecto"    = "PIN2"
          + "repositorio" = "git@github.com:hdbarrios/devops-g6-pin2.git"
        }
      + tags_all                             = {
          + "Group"       = "Grupo6"
          + "Name"        = "ec2-apache-pin2"
          + "Project"     = "PIN2"
          + "environment" = "test"
          + "equipo"      = "Grupo6"
          + "proyecto"    = "PIN2"
          + "repositorio" = "git@github.com:hdbarrios/devops-g6-pin2.git"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "61387dc9f27c12965ac34bb19b93d72ce06923bf"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = false
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags_all              = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 40
          + volume_type           = "gp2"
        }
    }

  # aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags_all = (known after apply)
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.apache_key will be created
  + resource "aws_key_pair" "apache_key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "apache-key"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCkf5wBCxIS1Rt18hkWUiY8dO79zIfygSj+hizDmWCAq6QZWs3rb8K2MrUCY+S7lIZG/0d3d7oLVxZDW9jYabpf1S5T3tdB2sGJpkLbM6eVcVdVq6zOvFcV7FUBYhLeTnFgib2Ox8/DJ1rZlcZwomGZr8LwG9r3fb89achUhOudy9sWephCo8jRCP/T1LmGWZNP52qCMwR1oVajDsGDmP1MRGrtlazo4DQw7GxhP+CSYmSbRoRpGPNJFzB4OHlcZqKZ8wfUxJ515eDT9xPi9uiVldfofuXxPRuG4rFtOUymO8IFrtvxOTbqwM6kSZimdK/9yp7J8N5N0T+jQQ1901DF"
      + tags_all        = (known after apply)
    }

  # aws_route.route will be created
  + resource "aws_route" "route" {
      + destination_cidr_block = "0.0.0.0/0"
      + gateway_id             = (known after apply)
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)
    }

  # aws_route_table.route_table will be created
  + resource "aws_route_table" "route_table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "Route_Table"
        }
      + tags_all         = {
          + "Name" = "Route_Table"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.subnet_association_public will be created
  + resource "aws_route_table_association" "subnet_association_public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.sg will be created
  + resource "aws_security_group" "sg" {
      + arn                    = (known after apply)
      + description            = "Allow TCP/80 & TCP/22"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                  + "10.11.1.0/24",
                ]
              + description      = "Allow SSH traffic"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow HTTP traffic on TCP/80"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.subnet_public will be created
  + resource "aws_subnet" "subnet_public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.11.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "subnet-public-1"
        }
      + tags_all                                       = {
          + "Name" = "subnet-public-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.vpc will be created
  + resource "aws_vpc" "vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.11.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Group"       = "Grupo6"
          + "Name"        = "terraform-vpc"
          + "Project"     = "PIN2"
          + "environment" = "test"
          + "equipo"      = "Grupo6"
          + "proyecto"    = "PIN2"
          + "repositorio" = "git@github.com:hdbarrios/devops-g6-pin2.git"
        }
      + tags_all                             = {
          + "Group"       = "Grupo6"
          + "Name"        = "terraform-vpc"
          + "Project"     = "PIN2"
          + "environment" = "test"
          + "equipo"      = "Grupo6"
          + "proyecto"    = "PIN2"
          + "repositorio" = "git@github.com:hdbarrios/devops-g6-pin2.git"
        }
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + apache_instance_id          = (known after apply)
  + apache_instance_ip          = (known after apply)
  + apache_instance_private_dns = (known after apply)
  + apache_instance_private_ip  = (known after apply)
  + apache_instance_public_dns  = (known after apply)
  + apache_instance_state       = (known after apply)
  + apache_instance_type        = "t2.micro"
  + availability_zone           = "us-east-1a"
  + instance_ip                 = (known after apply)
  + instance_key_name           = "apache-key"
  + internet_gateway_id         = (known after apply)
  + route_table_id              = (known after apply)
  + security_group_id           = (known after apply)
  + subnet_id                   = (known after apply)
  + vpc_id                      = (known after apply)

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

